
import random
import json
import torch
from ChatBot.model import NeuralNet
from ChatBot.nltk_utils import bag_of_words, tokenize

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


def chatbot_view(user_sentence):
    with open('ChatBot/intents.json', 'r') as json_data:
        intents = json.load(json_data)

    FILE = "ChatBot/data.pth"
    data = torch.load(FILE)

    input_size = data["input_size"]
    hidden_size = data["hidden_size"]
    output_size = data["output_size"]
    all_words = data['all_words']
    tags = data['tags']
    model_state = data["model_state"]

    model = NeuralNet(input_size, hidden_size, output_size).to(device)
    model.load_state_dict(model_state)
    model.eval()

    bot_name = "NoteBot"

    sentence = user_sentence

    sentence = tokenize(sentence)
    X = bag_of_words(sentence, all_words)
    X = X.reshape(1, X.shape[0])
    X = torch.from_numpy(X).to(device)

    output = model(X)
    _, predicted = torch.max(output, dim=1)

    tag = tags[predicted.item()]

    probs = torch.softmax(output, dim=1)
    prob = probs[0][predicted.item()]
    if prob.item() > 0.75:
        for intent in intents['intents']:
            if tag == intent["tag"]:
                last_sentence=random.choice(intent['responses'])
                return last_sentence


    else:
        return "I didn't understand what you mean.Can you ask in a different way?"
{
  "intents": [
    {
      "tag": "greeting",
      "patterns": [
        "Hi",
        "Hey",
        "Is anyone there?",
        "Hello",
        "Good day"
      ],
      "responses": [
        "Hey :-)",
        "Hello, thanks for visiting",
        "Hi there, what can I do for you?",
        "Hi there, how can I help?"
      ]
    },
    {
      "tag": "goodbye",
      "patterns": ["Bye", "See you later", "Goodbye"],
      "responses": [
        "See you later, thanks for visiting",
        "Have a nice day",
        "Bye! Come back again soon."
      ]
    },
    {
      "tag": "notes",
      "patterns": [
        "Do you have notes?",
        "How can ı find lecture notes?",
        "How can ı find notes?"
      ],
      "responses": [
        "You can find the notes in the homepage :)",
        "You can find the note you are looking for from the search box on the homepage or by using the filtering feature."
      ]
    },
    {
      "tag": "comment",
      "patterns": [
        "How can ı write a comment?",
        "How can ı rate a note?",
        "How can ı give a score?"
      ],
      "responses": [
        "You can see the comment and rating section at the bottom of the note details page."
      ]
    },
    {
      "tag": "score",
      "patterns": [
        "How is the total score of the note determined?"
      ],
      "responses": [
        "It is determined by the average of the scores in the given comments."
      ]
    },
    {
      "tag": "share",
      "patterns": [
        "How can ı share notes?",
        "How can ı add notes?"
      ],
      "responses": [
        "You can find the ShareNote button at the top of each page :)"
      ]
    },
     {
      "tag": "publish",
      "patterns": [
        "When will my uploaded note be published?",
        "Why was my comment not published?"
      ],
      "responses": [
        "Your notes and comments will be published on the site after admin approval."
      ]
    },

    {
      "tag": "download",
      "patterns": [
        "How can ı download the notes?"
      ],
      "responses": [
        "You can see the download button in the note details page."
      ]
    },
     {
      "tag": "password",
      "patterns": [
        "How can change my password?",
        "I want to change my password"
      ],
      "responses": [
        "You can find the change password button in the my account section at the top of the every page.  "
      ]
    },
    {
      "tag": "username",
      "patterns": [
        "How can change my username?",
        "I want to change my username"
      ],
      "responses": [
        "You can find the change username button in the my account section at the top of the every page.  "
      ]
    },

     {
      "tag": "email",
      "patterns": [
        "How can change my email address?",
        "I want to change my email address"
      ],
      "responses": [
        "You can find the change email button in the my account section at the top of the every page.  "
      ]
    },

    {
      "tag": "my",
      "patterns": [
        "How can I see the notes I have shared? ",
        "I want to see own notes.",
        "I want to see my notes."
      ],
      "responses": [
        "You can find the my notes button in the my account section at the top of the every page.  "
      ]
    },

     {
      "tag": "favorite",
      "patterns": [
        "How can I see the my favorite notes ",
        "I want to see own favorite notes.",
        "I want to see my favorite notes."
      ],
      "responses": [
        "You can find the my favorite notes button in the my account section at the top of the every page.  "
      ]
    },

    {
      "tag": "add",
      "patterns": [
        "How can I add the notes in my favorite notes "
      ],
      "responses": [
        "You can find the add to favorites button on the note details page. "
      ]
    },

    {
      "tag": "delete",
      "patterns": [
        "How can I delete the notes in my favorite notes "
      ],
      "responses": [
        "You can find the delete to favorites button on the note details page."
      ]
    },

    {
      "tag": "thanks",
      "patterns": ["Thanks", "Thank you", "That's helpful", "Thank's a lot!"],
      "responses": ["Happy to help!", "Any time!", "My pleasure"]
    },

    {
      "tag": "funny",
      "patterns": [
        "Tell me a joke!",
        "Tell me something funny!",
        "Do you know a joke?"
      ],
      "responses": [
        "Why did the hipster burn his mouth? He drank the coffee before it was cool.",
        "What did the buffalo say when his son left for college? Bison."
      ]
    }
  ]
}
import torch
import torch.nn as nn


class NeuralNet(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(NeuralNet, self).__init__()
        self.l1 = nn.Linear(input_size, hidden_size)
        self.l2 = nn.Linear(hidden_size, hidden_size)
        self.l3 = nn.Linear(hidden_size, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        out = self.l1(x)
        out = self.relu(out)
        out = self.l2(out)
        out = self.relu(out)
        out = self.l3(out)
        return out
import numpy as np
import nltk
from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

def tokenize(sentence):
    return nltk.word_tokenize(sentence)


def stem(word):
    return stemmer.stem(word.lower())


def bag_of_words(tokenized_sentence, words):
    # stem each word
    sentence_words = [stem(word) for word in tokenized_sentence]
    # initialize bag with 0 for each word
    bag = np.zeros(len(words), dtype=np.float32)
    for idx, w in enumerate(words):
        if w in sentence_words:
            bag[idx] = 1

    return bag

import numpy as np
import random
import json
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from ChatBot.nltk_utils import bag_of_words, tokenize, stem
from ChatBot.model import NeuralNet

with open('intents.json', 'r') as f:
    intents = json.load(f)

all_words = []
tags = []
xy = []
# loop through each sentence in our intents patterns
for intent in intents['intents']:
    tag = intent['tag']
    # add to tag list
    tags.append(tag)
    for pattern in intent['patterns']:
        # tokenize each word in the sentence
        w = tokenize(pattern)
        # add to our words list
        all_words.extend(w)
        # add to xy pair
        xy.append((w, tag))

# stem and lower each word
ignore_words = ['?', '.', '!']
all_words = [stem(w) for w in all_words if w not in ignore_words]
# remove duplicates and sort
all_words = sorted(set(all_words))
tags = sorted(set(tags))

print(len(xy), "patterns")
print(len(tags), "tags:", tags)
print(len(all_words), "unique stemmed words:", all_words)

# create training data
X_train = []
y_train = []
for (pattern_sentence, tag) in xy:
    bag = bag_of_words(pattern_sentence, all_words)
    X_train.append(bag)
    label = tags.index(tag)
    y_train.append(label)

X_train = np.array(X_train)
y_train = np.array(y_train)

# Hyper-parameters
num_epochs = 2000
batch_size = 8
learning_rate = 0.001
input_size = len(X_train[0])
hidden_size = 8
output_size = len(tags)
print(input_size, output_size)


class ChatDataset(Dataset):

    def __init__(self):
        self.n_samples = len(X_train)
        self.x_data = X_train
        self.y_data = y_train

    # support indexing such that dataset[i] can be used to get i-th sample
    def __getitem__(self, index):
        return self.x_data[index], self.y_data[index]

    # we can call len(dataset) to return the size
    def __len__(self):
        return self.n_samples


dataset = ChatDataset()
train_loader = DataLoader(dataset=dataset,
                          batch_size=batch_size,
                          shuffle=True,
                          num_workers=0)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model = NeuralNet(input_size, hidden_size, output_size).to(device)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

# Train the model
for epoch in range(num_epochs):
    for (words, labels) in train_loader:
        words = words.to(device)
        labels = labels.to(dtype=torch.long).to(device)

        outputs = model(words)
        loss = criterion(outputs, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    if (epoch + 1) % 100 == 0:
        print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item():.4f}')

print(f'final loss: {loss.item():.4f}')

data = {
    "model_state": model.state_dict(),
    "input_size": input_size,
    "hidden_size": hidden_size,
    "output_size": output_size,
    "all_words": all_words,
    "tags": tags
}

FILE = "data.pth"
torch.save(data, FILE)

print(f'training complete. file saved to {FILE}')
